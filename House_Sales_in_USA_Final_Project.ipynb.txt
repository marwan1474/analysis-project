{"cells":[{"cell_type":"markdown","id":"23450efb-fa8c-4160-a4e8-488b20362052","metadata":{},"source":["\n","\n","<h1 align=\"center\"><font size=\"5\">Final Project: House Sales in King County, USA </font></h1>\n"]},{"cell_type":"markdown","id":"cf03b4c9-c316-4b04-9d3f-168bd992d104","metadata":{},"source":["<h2>Table of Contents</h2>\n","<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n","    <ul>\n","    <li><a href=\"#Instructions\">Instructions</a></li>\n","    <li><a href=\"#About-the-Dataset\">About the Dataset</a></li>\n","    <li><a href=\"#Module-1:-Importing-Data-Sets\">Module 1: Importing Data </a></li>\n","    <li><a href=\"#Module-2:-Data-Wrangling\">Module 2: Data Wrangling</a> </li>\n","    <li><a href=\"#Module-3:-Exploratory-Data-Analysis\">Module 3: Exploratory Data Analysis</a></li>\n","    <li><a href=\"#Module-4:-Model-Development\">Module 4: Model Development</a></li>\n","    <li><a href=\"#Module-5:-Model-Evaluation-and-Refinement\">Module 5: Model Evaluation and Refinement</a></li>\n","</a></li>\n","</div>\n","<p>Estimated Time Needed: <strong>150 min</strong></p>\n","</div>\n","\n","<hr>\n"]},{"cell_type":"markdown","id":"f6873f85-17bc-4eca-b3c0-4e87be9efb42","metadata":{},"source":["# Instructions\n"]},{"cell_type":"markdown","id":"d0135559-4f80-436c-b6a3-d35baf28c8a2","metadata":{},"source":["In this assignment, you are a Data Analyst working at a Real Estate Investment Trust. The Trust would like to start investing in Residential real estate. You are tasked with determining the market price of a house given a set of features. You will analyze and predict housing prices using attributes or features such as square footage, number of bedrooms, number of floors, and so on. This is a template notebook; your job is to complete the ten questions. Some hints to the questions are given.\n","\n","As you are completing this notebook, take and save the **screenshots** of the final outputs of your solutions (e.g., final charts, tables, calculation results etc.). They will need to be shared in the following Peer Review section of the Final Project module.\n"]},{"cell_type":"markdown","id":"4c397032-6777-480a-ac82-5b15dbde638e","metadata":{},"source":["# About the Dataset\n","\n","This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015. It was taken from [here](https://www.kaggle.com/harlfoxem/housesalesprediction?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01). It was also slightly modified for the purposes of this course. \n"]},{"cell_type":"markdown","id":"71f2db79-f11e-477f-92f6-460552654d6a","metadata":{},"source":["| Variable      | Description                                                                                                 |\n","| ------------- | ----------------------------------------------------------------------------------------------------------- |\n","| id            | A notation for a house                                                                                      |\n","| date          | Date house was sold                                                                                         |\n","| price         | Price is prediction target                                                                                  |\n","| bedrooms      | Number of bedrooms                                                                                          |\n","| bathrooms     | Number of bathrooms                                                                                         |\n","| sqft_living   | Square footage of the home                                                                                  |\n","| sqft_lot      | Square footage of the lot                                                                                   |\n","| floors        | Total floors (levels) in house                                                                              |\n","| waterfront    | House which has a view to a waterfront                                                                      |\n","| view          | Has been viewed                                                                                             |\n","| condition     | How good the condition is overall                                                                           |\n","| grade         | overall grade given to the housing unit, based on King County grading system                                |\n","| sqft_above    | Square footage of house apart from basement                                                                 |\n","| sqft_basement | Square footage of the basement                                                                              |\n","| yr_built      | Built Year                                                                                                  |\n","| yr_renovated  | Year when house was renovated                                                                               |\n","| zipcode       | Zip code                                                                                                    |\n","| lat           | Latitude coordinate                                                                                         |\n","| long          | Longitude coordinate                                                                                        |\n","| sqft_living15 | Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area |\n","| sqft_lot15    | LotSize area in 2015(implies-- some renovations)                                                            |\n"]},{"cell_type":"markdown","id":"fae6af9a-adb1-4c20-b81c-7ca8f57740c9","metadata":{},"source":["## **Import the required libraries**\n"]},{"cell_type":"code","execution_count":1,"id":"32074530-5be2-4fe6-8364-ebc5c3ddae6d","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["numpy is already installed.\n","pandas is already installed.\n","matplotlib is already installed.\n","scikit-learn not found, installing...\n","scipy is already installed.\n","seaborn is already installed.\n","tqdm is already installed.\n"]}],"source":["import subprocess\n","import sys\n","\n","def install_libraries(libraries):\n","    for lib in libraries:\n","        try:\n","            __import__(lib) # function is a built-in function in Python that can be used to dynamically import a module by name\n","            print(f\"{lib} is already installed.\")\n","        except ImportError:\n","            print(f\"{lib} not found, installing...\")\n","            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", lib])\n","\n","libraries = [\"numpy\", \"pandas\", \"matplotlib\", \"scikit-learn\", \"scipy\", \"seaborn\", \"tqdm\"]\n","install_libraries(libraries)"]},{"cell_type":"code","execution_count":2,"id":"a4e865d6-8dd3-496c-8287-cf988a01d5ce","metadata":{},"outputs":[],"source":["# Surpress warnings:\n","def warn(*args, **kwargs):\n","    pass\n","import warnings\n","warnings.warn = warn"]},{"cell_type":"code","execution_count":3,"id":"ec71f8df-18b5-4f32-9034-dfb2897e84ed","metadata":{},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import seaborn as sns\n","from sklearn.pipeline import Pipeline\n","from sklearn.preprocessing import StandardScaler,PolynomialFeatures\n","from sklearn.linear_model import LinearRegression\n","%matplotlib inline"]},{"cell_type":"markdown","id":"49c46955-71a8-4191-8f42-28203a46b4db","metadata":{},"source":["# Module 1: Importing Data Sets\n"]},{"cell_type":"code","execution_count":4,"id":"16ed7738-a15e-427c-897d-e14feb9271d0","metadata":{},"outputs":[],"source":["filepath='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'"]},{"cell_type":"markdown","id":"7d089b1c-724f-4361-a84d-6f496251dcb1","metadata":{},"source":["Load the csv:\n"]},{"cell_type":"code","execution_count":5,"id":"95a68d42-12e4-4795-8ec1-bc79ad9f35ec","metadata":{},"outputs":[],"source":["df = pd.read_csv(filepath)"]},{"cell_type":"markdown","id":"6a00f1cd-480d-4397-955d-e5a120df7202","metadata":{},"source":["We use the method <code>head</code> to display the first 5 columns of the dataframe.\n"]},{"cell_type":"code","execution_count":6,"id":"e07045ed-8d45-47cc-b5b2-1db8215257a6","metadata":{},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>price</th>\n","      <th>bedrooms</th>\n","      <th>bathrooms</th>\n","      <th>sqft_living</th>\n","      <th>sqft_lot</th>\n","      <th>floors</th>\n","      <th>waterfront</th>\n","      <th>...</th>\n","      <th>grade</th>\n","      <th>sqft_above</th>\n","      <th>sqft_basement</th>\n","      <th>yr_built</th>\n","      <th>yr_renovated</th>\n","      <th>zipcode</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>sqft_living15</th>\n","      <th>sqft_lot15</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>7129300520</td>\n","      <td>20141013T000000</td>\n","      <td>221900.0</td>\n","      <td>3.0</td>\n","      <td>1.00</td>\n","      <td>1180</td>\n","      <td>5650</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>7</td>\n","      <td>1180</td>\n","      <td>0</td>\n","      <td>1955</td>\n","      <td>0</td>\n","      <td>98178</td>\n","      <td>47.5112</td>\n","      <td>-122.257</td>\n","      <td>1340</td>\n","      <td>5650</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>6414100192</td>\n","      <td>20141209T000000</td>\n","      <td>538000.0</td>\n","      <td>3.0</td>\n","      <td>2.25</td>\n","      <td>2570</td>\n","      <td>7242</td>\n","      <td>2.0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>7</td>\n","      <td>2170</td>\n","      <td>400</td>\n","      <td>1951</td>\n","      <td>1991</td>\n","      <td>98125</td>\n","      <td>47.7210</td>\n","      <td>-122.319</td>\n","      <td>1690</td>\n","      <td>7639</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>5631500400</td>\n","      <td>20150225T000000</td>\n","      <td>180000.0</td>\n","      <td>2.0</td>\n","      <td>1.00</td>\n","      <td>770</td>\n","      <td>10000</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>6</td>\n","      <td>770</td>\n","      <td>0</td>\n","      <td>1933</td>\n","      <td>0</td>\n","      <td>98028</td>\n","      <td>47.7379</td>\n","      <td>-122.233</td>\n","      <td>2720</td>\n","      <td>8062</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2487200875</td>\n","      <td>20141209T000000</td>\n","      <td>604000.0</td>\n","      <td>4.0</td>\n","      <td>3.00</td>\n","      <td>1960</td>\n","      <td>5000</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>7</td>\n","      <td>1050</td>\n","      <td>910</td>\n","      <td>1965</td>\n","      <td>0</td>\n","      <td>98136</td>\n","      <td>47.5208</td>\n","      <td>-122.393</td>\n","      <td>1360</td>\n","      <td>5000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>1954400510</td>\n","      <td>20150218T000000</td>\n","      <td>510000.0</td>\n","      <td>3.0</td>\n","      <td>2.00</td>\n","      <td>1680</td>\n","      <td>8080</td>\n","      <td>1.0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>8</td>\n","      <td>1680</td>\n","      <td>0</td>\n","      <td>1987</td>\n","      <td>0</td>\n","      <td>98074</td>\n","      <td>47.6168</td>\n","      <td>-122.045</td>\n","      <td>1800</td>\n","      <td>7503</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>"],"text/plain":["   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n","0           0  7129300520  20141013T000000  221900.0       3.0       1.00   \n","1           1  6414100192  20141209T000000  538000.0       3.0       2.25   \n","2           2  5631500400  20150225T000000  180000.0       2.0       1.00   \n","3           3  2487200875  20141209T000000  604000.0       4.0       3.00   \n","4           4  1954400510  20150218T000000  510000.0       3.0       2.00   \n","\n","   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n","0         1180      5650     1.0           0  ...      7        1180   \n","1         2570      7242     2.0           0  ...      7        2170   \n","2          770     10000     1.0           0  ...      6         770   \n","3         1960      5000     1.0           0  ...      7        1050   \n","4         1680      8080     1.0           0  ...      8        1680   \n","\n","   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n","0              0      1955             0    98178  47.5112 -122.257   \n","1            400      1951          1991    98125  47.7210 -122.319   \n","2              0      1933             0    98028  47.7379 -122.233   \n","3            910      1965             0    98136  47.5208 -122.393   \n","4              0      1987             0    98074  47.6168 -122.045   \n","\n","   sqft_living15  sqft_lot15  \n","0           1340        5650  \n","1           1690        7639  \n","2           2720        8062  \n","3           1360        5000  \n","4           1800        7503  \n","\n","[5 rows x 22 columns]"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["df.head()"]},{"cell_type":"markdown","id":"3b1486ae-f25d-4e9b-8103-8d19b26d0fbc","metadata":{},"source":["### Question 1\n","\n","Display the data types of each column using the function dtypes.\n"]},{"cell_type":"code","execution_count":8,"id":"6e9ac024-4a72-46f4-9f11-8c3b4b97be2a","metadata":{},"outputs":[{"data":{"text/plain":["Unnamed: 0         int64\n","id                 int64\n","date              object\n","price            float64\n","bedrooms         float64\n","bathrooms        float64\n","sqft_living        int64\n","sqft_lot           int64\n","floors           float64\n","waterfront         int64\n","view               int64\n","condition          int64\n","grade              int64\n","sqft_above         int64\n","sqft_basement      int64\n","yr_built           int64\n","yr_renovated       int64\n","zipcode            int64\n","lat              float64\n","long             float64\n","sqft_living15      int64\n","sqft_lot15         int64\n","dtype: object"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","df.dtypes"]},{"cell_type":"markdown","id":"81f491ce-d41c-41a3-b339-0d8d49ff911d","metadata":{},"source":["We use the method describe to obtain a statistical summary of the dataframe.\n"]},{"cell_type":"code","execution_count":9,"id":"7ab67ea9-69b8-44f4-b7dc-4e548a925b20","metadata":{},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>id</th>\n","      <th>price</th>\n","      <th>bedrooms</th>\n","      <th>bathrooms</th>\n","      <th>sqft_living</th>\n","      <th>sqft_lot</th>\n","      <th>floors</th>\n","      <th>waterfront</th>\n","      <th>view</th>\n","      <th>...</th>\n","      <th>grade</th>\n","      <th>sqft_above</th>\n","      <th>sqft_basement</th>\n","      <th>yr_built</th>\n","      <th>yr_renovated</th>\n","      <th>zipcode</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>sqft_living15</th>\n","      <th>sqft_lot15</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>21613.00000</td>\n","      <td>2.161300e+04</td>\n","      <td>2.161300e+04</td>\n","      <td>21600.000000</td>\n","      <td>21603.000000</td>\n","      <td>21613.000000</td>\n","      <td>2.161300e+04</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>...</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>10806.00000</td>\n","      <td>4.580302e+09</td>\n","      <td>5.400881e+05</td>\n","      <td>3.372870</td>\n","      <td>2.115736</td>\n","      <td>2079.899736</td>\n","      <td>1.510697e+04</td>\n","      <td>1.494309</td>\n","      <td>0.007542</td>\n","      <td>0.234303</td>\n","      <td>...</td>\n","      <td>7.656873</td>\n","      <td>1788.390691</td>\n","      <td>291.509045</td>\n","      <td>1971.005136</td>\n","      <td>84.402258</td>\n","      <td>98077.939805</td>\n","      <td>47.560053</td>\n","      <td>-122.213896</td>\n","      <td>1986.552492</td>\n","      <td>12768.455652</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6239.28002</td>\n","      <td>2.876566e+09</td>\n","      <td>3.671272e+05</td>\n","      <td>0.926657</td>\n","      <td>0.768996</td>\n","      <td>918.440897</td>\n","      <td>4.142051e+04</td>\n","      <td>0.539989</td>\n","      <td>0.086517</td>\n","      <td>0.766318</td>\n","      <td>...</td>\n","      <td>1.175459</td>\n","      <td>828.090978</td>\n","      <td>442.575043</td>\n","      <td>29.373411</td>\n","      <td>401.679240</td>\n","      <td>53.505026</td>\n","      <td>0.138564</td>\n","      <td>0.140828</td>\n","      <td>685.391304</td>\n","      <td>27304.179631</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.00000</td>\n","      <td>1.000102e+06</td>\n","      <td>7.500000e+04</td>\n","      <td>1.000000</td>\n","      <td>0.500000</td>\n","      <td>290.000000</td>\n","      <td>5.200000e+02</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>290.000000</td>\n","      <td>0.000000</td>\n","      <td>1900.000000</td>\n","      <td>0.000000</td>\n","      <td>98001.000000</td>\n","      <td>47.155900</td>\n","      <td>-122.519000</td>\n","      <td>399.000000</td>\n","      <td>651.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5403.00000</td>\n","      <td>2.123049e+09</td>\n","      <td>3.219500e+05</td>\n","      <td>3.000000</td>\n","      <td>1.750000</td>\n","      <td>1427.000000</td>\n","      <td>5.040000e+03</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>7.000000</td>\n","      <td>1190.000000</td>\n","      <td>0.000000</td>\n","      <td>1951.000000</td>\n","      <td>0.000000</td>\n","      <td>98033.000000</td>\n","      <td>47.471000</td>\n","      <td>-122.328000</td>\n","      <td>1490.000000</td>\n","      <td>5100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>10806.00000</td>\n","      <td>3.904930e+09</td>\n","      <td>4.500000e+05</td>\n","      <td>3.000000</td>\n","      <td>2.250000</td>\n","      <td>1910.000000</td>\n","      <td>7.618000e+03</td>\n","      <td>1.500000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>7.000000</td>\n","      <td>1560.000000</td>\n","      <td>0.000000</td>\n","      <td>1975.000000</td>\n","      <td>0.000000</td>\n","      <td>98065.000000</td>\n","      <td>47.571800</td>\n","      <td>-122.230000</td>\n","      <td>1840.000000</td>\n","      <td>7620.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>16209.00000</td>\n","      <td>7.308900e+09</td>\n","      <td>6.450000e+05</td>\n","      <td>4.000000</td>\n","      <td>2.500000</td>\n","      <td>2550.000000</td>\n","      <td>1.068800e+04</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>8.000000</td>\n","      <td>2210.000000</td>\n","      <td>560.000000</td>\n","      <td>1997.000000</td>\n","      <td>0.000000</td>\n","      <td>98118.000000</td>\n","      <td>47.678000</td>\n","      <td>-122.125000</td>\n","      <td>2360.000000</td>\n","      <td>10083.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>21612.00000</td>\n","      <td>9.900000e+09</td>\n","      <td>7.700000e+06</td>\n","      <td>33.000000</td>\n","      <td>8.000000</td>\n","      <td>13540.000000</td>\n","      <td>1.651359e+06</td>\n","      <td>3.500000</td>\n","      <td>1.000000</td>\n","      <td>4.000000</td>\n","      <td>...</td>\n","      <td>13.000000</td>\n","      <td>9410.000000</td>\n","      <td>4820.000000</td>\n","      <td>2015.000000</td>\n","      <td>2015.000000</td>\n","      <td>98199.000000</td>\n","      <td>47.777600</td>\n","      <td>-121.315000</td>\n","      <td>6210.000000</td>\n","      <td>871200.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>8 rows × 21 columns</p>\n","</div>"],"text/plain":["        Unnamed: 0            id         price      bedrooms     bathrooms  \\\n","count  21613.00000  2.161300e+04  2.161300e+04  21600.000000  21603.000000   \n","mean   10806.00000  4.580302e+09  5.400881e+05      3.372870      2.115736   \n","std     6239.28002  2.876566e+09  3.671272e+05      0.926657      0.768996   \n","min        0.00000  1.000102e+06  7.500000e+04      1.000000      0.500000   \n","25%     5403.00000  2.123049e+09  3.219500e+05      3.000000      1.750000   \n","50%    10806.00000  3.904930e+09  4.500000e+05      3.000000      2.250000   \n","75%    16209.00000  7.308900e+09  6.450000e+05      4.000000      2.500000   \n","max    21612.00000  9.900000e+09  7.700000e+06     33.000000      8.000000   \n","\n","        sqft_living      sqft_lot        floors    waterfront          view  \\\n","count  21613.000000  2.161300e+04  21613.000000  21613.000000  21613.000000   \n","mean    2079.899736  1.510697e+04      1.494309      0.007542      0.234303   \n","std      918.440897  4.142051e+04      0.539989      0.086517      0.766318   \n","min      290.000000  5.200000e+02      1.000000      0.000000      0.000000   \n","25%     1427.000000  5.040000e+03      1.000000      0.000000      0.000000   \n","50%     1910.000000  7.618000e+03      1.500000      0.000000      0.000000   \n","75%     2550.000000  1.068800e+04      2.000000      0.000000      0.000000   \n","max    13540.000000  1.651359e+06      3.500000      1.000000      4.000000   \n","\n","       ...         grade    sqft_above  sqft_basement      yr_built  \\\n","count  ...  21613.000000  21613.000000   21613.000000  21613.000000   \n","mean   ...      7.656873   1788.390691     291.509045   1971.005136   \n","std    ...      1.175459    828.090978     442.575043     29.373411   \n","min    ...      1.000000    290.000000       0.000000   1900.000000   \n","25%    ...      7.000000   1190.000000       0.000000   1951.000000   \n","50%    ...      7.000000   1560.000000       0.000000   1975.000000   \n","75%    ...      8.000000   2210.000000     560.000000   1997.000000   \n","max    ...     13.000000   9410.000000    4820.000000   2015.000000   \n","\n","       yr_renovated       zipcode           lat          long  sqft_living15  \\\n","count  21613.000000  21613.000000  21613.000000  21613.000000   21613.000000   \n","mean      84.402258  98077.939805     47.560053   -122.213896    1986.552492   \n","std      401.679240     53.505026      0.138564      0.140828     685.391304   \n","min        0.000000  98001.000000     47.155900   -122.519000     399.000000   \n","25%        0.000000  98033.000000     47.471000   -122.328000    1490.000000   \n","50%        0.000000  98065.000000     47.571800   -122.230000    1840.000000   \n","75%        0.000000  98118.000000     47.678000   -122.125000    2360.000000   \n","max     2015.000000  98199.000000     47.777600   -121.315000    6210.000000   \n","\n","          sqft_lot15  \n","count   21613.000000  \n","mean    12768.455652  \n","std     27304.179631  \n","min       651.000000  \n","25%      5100.000000  \n","50%      7620.000000  \n","75%     10083.000000  \n","max    871200.000000  \n","\n","[8 rows x 21 columns]"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["df.describe()"]},{"cell_type":"markdown","id":"1b163648-f3d9-4039-85d9-e007e9e8dcb2","metadata":{},"source":["# Module 2: Data Wrangling\n"]},{"cell_type":"markdown","id":"5972cd4f-4daa-44b7-8fac-a160fd1b9be2","metadata":{},"source":["### Question 2\n","\n","Drop the columns <code>\"id\"</code>  and <code>\"Unnamed: 0\"</code> from axis 1 using the method <code>drop()</code>, then use the method <code>describe()</code> to obtain a statistical summary of the data. Make sure the <code>inplace</code> parameter is set to <code>True</code>.  \n"]},{"cell_type":"code","execution_count":10,"id":"47f133b4-2e0b-4f55-aef3-ae77a580e653","metadata":{},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","      <th>bedrooms</th>\n","      <th>bathrooms</th>\n","      <th>sqft_living</th>\n","      <th>sqft_lot</th>\n","      <th>floors</th>\n","      <th>waterfront</th>\n","      <th>view</th>\n","      <th>condition</th>\n","      <th>grade</th>\n","      <th>sqft_above</th>\n","      <th>sqft_basement</th>\n","      <th>yr_built</th>\n","      <th>yr_renovated</th>\n","      <th>zipcode</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>sqft_living15</th>\n","      <th>sqft_lot15</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>2.161300e+04</td>\n","      <td>21600.000000</td>\n","      <td>21603.000000</td>\n","      <td>21613.000000</td>\n","      <td>2.161300e+04</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","      <td>21613.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>5.400881e+05</td>\n","      <td>3.372870</td>\n","      <td>2.115736</td>\n","      <td>2079.899736</td>\n","      <td>1.510697e+04</td>\n","      <td>1.494309</td>\n","      <td>0.007542</td>\n","      <td>0.234303</td>\n","      <td>3.409430</td>\n","      <td>7.656873</td>\n","      <td>1788.390691</td>\n","      <td>291.509045</td>\n","      <td>1971.005136</td>\n","      <td>84.402258</td>\n","      <td>98077.939805</td>\n","      <td>47.560053</td>\n","      <td>-122.213896</td>\n","      <td>1986.552492</td>\n","      <td>12768.455652</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>3.671272e+05</td>\n","      <td>0.926657</td>\n","      <td>0.768996</td>\n","      <td>918.440897</td>\n","      <td>4.142051e+04</td>\n","      <td>0.539989</td>\n","      <td>0.086517</td>\n","      <td>0.766318</td>\n","      <td>0.650743</td>\n","      <td>1.175459</td>\n","      <td>828.090978</td>\n","      <td>442.575043</td>\n","      <td>29.373411</td>\n","      <td>401.679240</td>\n","      <td>53.505026</td>\n","      <td>0.138564</td>\n","      <td>0.140828</td>\n","      <td>685.391304</td>\n","      <td>27304.179631</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>7.500000e+04</td>\n","      <td>1.000000</td>\n","      <td>0.500000</td>\n","      <td>290.000000</td>\n","      <td>5.200000e+02</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>290.000000</td>\n","      <td>0.000000</td>\n","      <td>1900.000000</td>\n","      <td>0.000000</td>\n","      <td>98001.000000</td>\n","      <td>47.155900</td>\n","      <td>-122.519000</td>\n","      <td>399.000000</td>\n","      <td>651.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>3.219500e+05</td>\n","      <td>3.000000</td>\n","      <td>1.750000</td>\n","      <td>1427.000000</td>\n","      <td>5.040000e+03</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>7.000000</td>\n","      <td>1190.000000</td>\n","      <td>0.000000</td>\n","      <td>1951.000000</td>\n","      <td>0.000000</td>\n","      <td>98033.000000</td>\n","      <td>47.471000</td>\n","      <td>-122.328000</td>\n","      <td>1490.000000</td>\n","      <td>5100.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>4.500000e+05</td>\n","      <td>3.000000</td>\n","      <td>2.250000</td>\n","      <td>1910.000000</td>\n","      <td>7.618000e+03</td>\n","      <td>1.500000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>7.000000</td>\n","      <td>1560.000000</td>\n","      <td>0.000000</td>\n","      <td>1975.000000</td>\n","      <td>0.000000</td>\n","      <td>98065.000000</td>\n","      <td>47.571800</td>\n","      <td>-122.230000</td>\n","      <td>1840.000000</td>\n","      <td>7620.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.450000e+05</td>\n","      <td>4.000000</td>\n","      <td>2.500000</td>\n","      <td>2550.000000</td>\n","      <td>1.068800e+04</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>4.000000</td>\n","      <td>8.000000</td>\n","      <td>2210.000000</td>\n","      <td>560.000000</td>\n","      <td>1997.000000</td>\n","      <td>0.000000</td>\n","      <td>98118.000000</td>\n","      <td>47.678000</td>\n","      <td>-122.125000</td>\n","      <td>2360.000000</td>\n","      <td>10083.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>7.700000e+06</td>\n","      <td>33.000000</td>\n","      <td>8.000000</td>\n","      <td>13540.000000</td>\n","      <td>1.651359e+06</td>\n","      <td>3.500000</td>\n","      <td>1.000000</td>\n","      <td>4.000000</td>\n","      <td>5.000000</td>\n","      <td>13.000000</td>\n","      <td>9410.000000</td>\n","      <td>4820.000000</td>\n","      <td>2015.000000</td>\n","      <td>2015.000000</td>\n","      <td>98199.000000</td>\n","      <td>47.777600</td>\n","      <td>-121.315000</td>\n","      <td>6210.000000</td>\n","      <td>871200.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\n","count  2.161300e+04  21600.000000  21603.000000  21613.000000  2.161300e+04   \n","mean   5.400881e+05      3.372870      2.115736   2079.899736  1.510697e+04   \n","std    3.671272e+05      0.926657      0.768996    918.440897  4.142051e+04   \n","min    7.500000e+04      1.000000      0.500000    290.000000  5.200000e+02   \n","25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n","50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n","75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \n","max    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n","\n","             floors    waterfront          view     condition         grade  \\\n","count  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \n","mean       1.494309      0.007542      0.234303      3.409430      7.656873   \n","std        0.539989      0.086517      0.766318      0.650743      1.175459   \n","min        1.000000      0.000000      0.000000      1.000000      1.000000   \n","25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n","50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n","75%        2.000000      0.000000      0.000000      4.000000      8.000000   \n","max        3.500000      1.000000      4.000000      5.000000     13.000000   \n","\n","         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\n","count  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \n","mean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \n","std      828.090978     442.575043     29.373411    401.679240     53.505026   \n","min      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n","25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n","50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n","75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \n","max     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n","\n","                lat          long  sqft_living15     sqft_lot15  \n","count  21613.000000  21613.000000   21613.000000   21613.000000  \n","mean      47.560053   -122.213896    1986.552492   12768.455652  \n","std        0.138564      0.140828     685.391304   27304.179631  \n","min       47.155900   -122.519000     399.000000     651.000000  \n","25%       47.471000   -122.328000    1490.000000    5100.000000  \n","50%       47.571800   -122.230000    1840.000000    7620.000000  \n","75%       47.678000   -122.125000    2360.000000   10083.000000  \n","max       47.777600   -121.315000    6210.000000  871200.000000  "]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","df.drop(['id'], axis=1, inplace=True)\n","df.drop(['Unnamed: 0'], axis=1, inplace=True)\n","df.describe()"]},{"cell_type":"markdown","id":"e3ca0911-c2ed-4ec7-8c80-5d8441b4e18d","metadata":{},"source":["We can see we have missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>\n"]},{"cell_type":"code","execution_count":11,"id":"7decf9ea-e660-474e-bc31-f4302b65ccb7","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["number of NaN values for the column bedrooms : 13\n","number of NaN values for the column bathrooms : 10\n"]}],"source":["print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\n","print(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n"]},{"cell_type":"markdown","id":"5f4be86e-910f-48ba-83a5-eac8d70affde","metadata":{},"source":["We can replace the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code>inplace</code> parameter to <code>True</code>\n"]},{"cell_type":"code","execution_count":12,"id":"c6894355-004b-4dbc-8d6e-ebff4045c3d6","metadata":{},"outputs":[],"source":["mean=df['bedrooms'].mean()\n","df['bedrooms'].replace(np.nan,mean, inplace=True)"]},{"cell_type":"markdown","id":"32b20dec-ca9b-40b7-9a8d-3b9f8f30255a","metadata":{},"source":["We also replace the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code> inplace </code>  parameter top <code> True </code>\n"]},{"cell_type":"code","execution_count":13,"id":"153a8ccd-d800-4925-a17f-8647fe4390ad","metadata":{},"outputs":[],"source":["mean=df['bathrooms'].mean()\n","df['bathrooms'].replace(np.nan,mean, inplace=True)"]},{"cell_type":"code","execution_count":14,"id":"0bdcd33f-72be-49d1-a7af-8b727c991431","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["number of NaN values for the column bedrooms : 0\n","number of NaN values for the column bathrooms : 0\n"]}],"source":["print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\n","print(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())"]},{"cell_type":"markdown","id":"c11d6298-0c2d-4e6e-8739-40be526b216c","metadata":{},"source":["# Module 3: Exploratory Data Analysis\n"]},{"cell_type":"markdown","id":"63b38df9-d269-4ec4-8d3f-58e9d8998f4c","metadata":{},"source":["### Question 3\n","\n","Use the method <code>value_counts</code> to count the number of houses with unique floor values, use the method <code>.to_frame()</code> to convert it to a data frame.\n"]},{"cell_type":"code","execution_count":15,"id":"d8c602f3-3477-408a-b38c-c72edd3eb24f","metadata":{},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>floors</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1.0</th>\n","      <td>10680</td>\n","    </tr>\n","    <tr>\n","      <th>2.0</th>\n","      <td>8241</td>\n","    </tr>\n","    <tr>\n","      <th>1.5</th>\n","      <td>1910</td>\n","    </tr>\n","    <tr>\n","      <th>3.0</th>\n","      <td>613</td>\n","    </tr>\n","    <tr>\n","      <th>2.5</th>\n","      <td>161</td>\n","    </tr>\n","    <tr>\n","      <th>3.5</th>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        count\n","floors       \n","1.0     10680\n","2.0      8241\n","1.5      1910\n","3.0       613\n","2.5       161\n","3.5         8"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","df['floors'].value_counts().to_frame()"]},{"cell_type":"markdown","id":"0988bb76-e84b-4bc5-b881-5fd016aa7dec","metadata":{},"source":["### Question 4\n","\n","Use the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers."]},{"cell_type":"code","execution_count":16,"id":"3f1e2db4-e614-4991-9d77-0e5656ecd2d6","metadata":{},"outputs":[{"data":{"text/plain":["<Axes: xlabel='waterfront', ylabel='price'>"]},"execution_count":16,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["sns.boxplot(x='waterfront', y='price', data=df)"]},{"cell_type":"markdown","id":"b7758f64-4f7e-4e35-aa2e-f28cc8fc45d2","metadata":{},"source":["### Question 5\n","\n","Use the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price.\n"]},{"cell_type":"code","execution_count":17,"id":"c574630e-b850-4232-b86b-e5b0c054d599","metadata":{},"outputs":[{"data":{"text/plain":["(0.0, 8081250.0)"]},"execution_count":17,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","sns.regplot(x='sqft_above', y='price', data=df)\n","plt.ylim(0,)"]},{"cell_type":"markdown","id":"95f7a93e-36fb-419c-b44c-74543819caa2","metadata":{},"source":["We can use the Pandas method <code>corr()</code>  to find the feature other than price that is most correlated with price.\n"]},{"cell_type":"code","execution_count":23,"id":"51b64501-c716-4f97-b021-d5737ce47e56","metadata":{},"outputs":[{"ename":"ValueError","evalue":"could not convert string to float: '20141013T000000'","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[1;32mIn[23], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcorr\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mprice\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39msort_values()\n","File \u001b[1;32md:\\Anaconda\\Lib\\site-packages\\pandas\\core\\frame.py:11049\u001b[0m, in \u001b[0;36mDataFrame.corr\u001b[1;34m(self, method, min_periods, numeric_only)\u001b[0m\n\u001b[0;32m  11047\u001b[0m cols \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mcolumns\n\u001b[0;32m  11048\u001b[0m idx \u001b[38;5;241m=\u001b[39m cols\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[1;32m> 11049\u001b[0m mat \u001b[38;5;241m=\u001b[39m \u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto_numpy\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mfloat\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_value\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnan\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[0;32m  11051\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m method \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpearson\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m  11052\u001b[0m     correl \u001b[38;5;241m=\u001b[39m libalgos\u001b[38;5;241m.\u001b[39mnancorr(mat, minp\u001b[38;5;241m=\u001b[39mmin_periods)\n","File \u001b[1;32md:\\Anaconda\\Lib\\site-packages\\pandas\\core\\frame.py:1993\u001b[0m, in \u001b[0;36mDataFrame.to_numpy\u001b[1;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[0;32m   1991\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1992\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mdtype(dtype)\n\u001b[1;32m-> 1993\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_mgr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mas_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_value\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mna_value\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1994\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m result\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m dtype:\n\u001b[0;32m   1995\u001b[0m     result \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39masarray(result, dtype\u001b[38;5;241m=\u001b[39mdtype)\n","File \u001b[1;32md:\\Anaconda\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1694\u001b[0m, in \u001b[0;36mBlockManager.as_array\u001b[1;34m(self, dtype, copy, na_value)\u001b[0m\n\u001b[0;32m   1692\u001b[0m         arr\u001b[38;5;241m.\u001b[39mflags\u001b[38;5;241m.\u001b[39mwriteable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m   1693\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1694\u001b[0m     arr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_interleave\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mna_value\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mna_value\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   1695\u001b[0m     \u001b[38;5;66;03m# The underlying data was copied within _interleave, so no need\u001b[39;00m\n\u001b[0;32m   1696\u001b[0m     \u001b[38;5;66;03m# to further copy if copy=True or setting na_value\u001b[39;00m\n\u001b[0;32m   1698\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m na_value \u001b[38;5;129;01mis\u001b[39;00m lib\u001b[38;5;241m.\u001b[39mno_default:\n","File \u001b[1;32md:\\Anaconda\\Lib\\site-packages\\pandas\\core\\internals\\managers.py:1753\u001b[0m, in \u001b[0;36mBlockManager._interleave\u001b[1;34m(self, dtype, na_value)\u001b[0m\n\u001b[0;32m   1751\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m   1752\u001b[0m         arr \u001b[38;5;241m=\u001b[39m blk\u001b[38;5;241m.\u001b[39mget_values(dtype)\n\u001b[1;32m-> 1753\u001b[0m     \u001b[43mresult\u001b[49m\u001b[43m[\u001b[49m\u001b[43mrl\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mindexer\u001b[49m\u001b[43m]\u001b[49m \u001b[38;5;241m=\u001b[39m arr\n\u001b[0;32m   1754\u001b[0m     itemmask[rl\u001b[38;5;241m.\u001b[39mindexer] \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m   1756\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m itemmask\u001b[38;5;241m.\u001b[39mall():\n","\u001b[1;31mValueError\u001b[0m: could not convert string to float: '20141013T000000'"]}],"source":["df.corr()['price'].sort_values()"]},{"cell_type":"code","execution_count":24,"metadata":{},"outputs":[{"data":{"text/plain":["price            1.000000\n","sqft_living      0.702035\n","grade            0.667434\n","sqft_above       0.605567\n","sqft_living15    0.585379\n","bathrooms        0.525738\n","view             0.397293\n","sqft_basement    0.323816\n","bedrooms         0.308797\n","lat              0.307003\n","waterfront       0.266369\n","floors           0.256794\n","yr_renovated     0.126434\n","sqft_lot         0.089661\n","sqft_lot15       0.082447\n","yr_built         0.054012\n","condition        0.036362\n","long             0.021626\n","zipcode         -0.053203\n","Name: price, dtype: float64"]},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":["numeric_df = df.select_dtypes(include=[np.number])\n","correlation_with_price = numeric_df.corr()['price'].sort_values(ascending=False)\n","correlation_with_price"]},{"cell_type":"markdown","id":"809ba6d8-f0d5-40a6-bdf8-68cd2cc241f4","metadata":{},"source":["# Module 4: Model Development\n"]},{"cell_type":"markdown","id":"7f928c37-fa04-472f-ba71-9eaf2eb634e5","metadata":{},"source":["We can Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2.\n"]},{"cell_type":"code","execution_count":25,"id":"d254c5ad-7d63-43f3-8673-9faa86946641","metadata":{},"outputs":[{"data":{"text/plain":["0.00046769430149007363"]},"execution_count":25,"metadata":{},"output_type":"execute_result"}],"source":["X = df[['long']]\n","Y = df['price']\n","lm = LinearRegression()\n","lm.fit(X,Y)\n","lm.score(X, Y)"]},{"cell_type":"markdown","id":"cddd5a5e-b54a-4f7d-996c-a6aa41a32b9e","metadata":{},"source":["### Question  6\n","\n","Fit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2."]},{"cell_type":"code","execution_count":38,"id":"0a7128e2-2d14-4f90-a8f3-83baf72bea6a","metadata":{},"outputs":[{"data":{"text/plain":["0.4928532179037931"]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","Lre = LinearRegression()\n","X = df[['sqft_living']]\n","Y = df['price']\n","Lre.fit(X,Y)\n","Lre.score(X,Y)"]},{"cell_type":"markdown","id":"2743f36f-4f7e-4a3c-80f9-7d6a903d1362","metadata":{},"source":["### Question 7\n","\n","Fit a linear regression model to predict the <code>'price'</code> using the list of features:\n"]},{"cell_type":"code","execution_count":27,"id":"9ea8bfc1-9d9e-410c-b26f-a0d1e795412d","metadata":{},"outputs":[],"source":["features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]     "]},{"cell_type":"markdown","id":"37d4471a-1459-4b29-b5f7-14fb22d4866c","metadata":{},"source":["Then calculate the R^2.\n"]},{"cell_type":"code","execution_count":39,"id":"37ff6050-e15d-4063-8000-37d7acbf0f33","metadata":{},"outputs":[{"data":{"text/plain":["0.657549290662202"]},"execution_count":39,"metadata":{},"output_type":"execute_result"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","X = df[features]\n","Y = df['price']\n","Lre.fit(X,Y)\n","Lre.score(X,Y)"]},{"cell_type":"markdown","id":"8c7189c8-f58e-47b5-8ec6-172be0c48531","metadata":{},"source":["### This will help with Question 8\n","\n","Create a list of tuples, the first element in the tuple contains the name of the estimator:\n","\n","<code>'scale'</code>\n","\n","<code>'polynomial'</code>\n","\n","<code>'model'</code>\n","\n","The second element in the tuple  contains the model constructor\n","\n","<code>StandardScaler()</code>\n","\n","<code>PolynomialFeatures(include_bias=False)</code>\n","\n","<code>LinearRegression()</code>\n"]},{"cell_type":"code","execution_count":31,"id":"66fbc934-1d38-4661-bdf3-681d34e6b16e","metadata":{},"outputs":[],"source":["Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]"]},{"cell_type":"markdown","id":"613f791d-ef91-4664-866a-89252b3b8212","metadata":{},"source":["### Question 8\n","\n","Use the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2.\n"]},{"cell_type":"code","execution_count":40,"id":"bc97e85d-4598-4a4e-8c55-bd5dcfb064fd","metadata":{},"outputs":[{"data":{"text/plain":["0.7508105841089538"]},"execution_count":40,"metadata":{},"output_type":"execute_result"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","pipe = Pipeline(Input)\n","pipe.fit(X,Y)\n","pipe.score(X,Y)"]},{"cell_type":"markdown","id":"71a6fb92-1030-4de8-9f3d-e302b9adab5d","metadata":{},"source":["# Module 5: Model Evaluation and Refinement\n"]},{"cell_type":"markdown","id":"e7976307-e9b7-4bd6-a354-60b32d6d908e","metadata":{},"source":["Import the necessary modules:\n"]},{"cell_type":"code","execution_count":33,"id":"91f1703d-7988-4be6-9df1-271772f248fb","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["done\n"]}],"source":["from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import train_test_split\n","print(\"done\")"]},{"cell_type":"markdown","id":"99e938c9-d9dc-423b-9b19-c79f916bbc88","metadata":{},"source":["We will split the data into training and testing sets:\n"]},{"cell_type":"code","execution_count":34,"id":"ea5e4e0b-9b94-4890-8b62-881c37a62f0b","metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["number of test samples: 3242\n","number of training samples: 18371\n"]}],"source":["features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \n","X = df[features]\n","Y = df['price']\n","\n","x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n","\n","\n","print(\"number of test samples:\", x_test.shape[0])\n","print(\"number of training samples:\",x_train.shape[0])"]},{"cell_type":"markdown","id":"28376b4e-de4f-407a-8099-3d0109c7d211","metadata":{},"source":["### Question 9\n","\n","Create and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data."]},{"cell_type":"code","execution_count":35,"id":"2b0542bd-198a-43d6-bbe0-e044fed0b59e","metadata":{},"outputs":[],"source":["from sklearn.linear_model import Ridge"]},{"cell_type":"code","execution_count":41,"id":"fd91bda9-4d07-450f-b3f7-92e1c7697a79","metadata":{},"outputs":[{"data":{"text/plain":["0.6478759163939115"]},"execution_count":41,"metadata":{},"output_type":"execute_result"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","RidgeModel = Ridge(alpha = 0.1)\n","RidgeModel.fit(x_train, y_train)\n","RidgeModel.score(x_test, y_test)"]},{"cell_type":"markdown","id":"fd0a8d7f-4ebc-41a5-b9d2-b9a9f0ce8706","metadata":{},"source":["### Question 10\n","\n","Perform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided."]},{"cell_type":"code","execution_count":42,"id":"8437d736-99ea-4f97-82f8-c80ee9a9d094","metadata":{},"outputs":[{"data":{"text/plain":["0.7002744283021596"]},"execution_count":42,"metadata":{},"output_type":"execute_result"}],"source":["#Enter Your Code, Execute and take the Screenshot\n","pr = PolynomialFeatures(degree=2)\n","x_train_pr = pr.fit_transform(x_train)\n","x_test_pr = pr.fit_transform(x_test)\n","RidgeModel = Ridge(alpha = 0.1)\n","RidgeModel.fit(x_train_pr, y_train)\n","RidgeModel.score(x_test_pr, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"cls2","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.4"},"prev_pub_hash":"8e1b9a014f4d5dd1f594f0f84b9e2a27c098aabf3c393aa0062e8aef51a297d0"},"nbformat":4,"nbformat_minor":4}
